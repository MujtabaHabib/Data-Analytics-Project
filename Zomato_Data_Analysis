{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4f310565",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1b3f0cef",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('zomato.csv',encoding= 'latin-')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "05d98328",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Restaurant ID</th>\n",
       "      <th>Restaurant Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>City</th>\n",
       "      <th>Address</th>\n",
       "      <th>Locality</th>\n",
       "      <th>Locality Verbose</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Cuisines</th>\n",
       "      <th>...</th>\n",
       "      <th>Currency</th>\n",
       "      <th>Has Table booking</th>\n",
       "      <th>Has Online delivery</th>\n",
       "      <th>Is delivering now</th>\n",
       "      <th>Switch to order menu</th>\n",
       "      <th>Price range</th>\n",
       "      <th>Aggregate rating</th>\n",
       "      <th>Rating color</th>\n",
       "      <th>Rating text</th>\n",
       "      <th>Votes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6317637</td>\n",
       "      <td>Le Petit Souffle</td>\n",
       "      <td>162</td>\n",
       "      <td>Makati City</td>\n",
       "      <td>Third Floor, Century City Mall, Kalayaan Avenu...</td>\n",
       "      <td>Century City Mall, Poblacion, Makati City</td>\n",
       "      <td>Century City Mall, Poblacion, Makati City, Mak...</td>\n",
       "      <td>121.027535</td>\n",
       "      <td>14.565443</td>\n",
       "      <td>French, Japanese, Desserts</td>\n",
       "      <td>...</td>\n",
       "      <td>Botswana Pula(P)</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3</td>\n",
       "      <td>4.8</td>\n",
       "      <td>Dark Green</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6304287</td>\n",
       "      <td>Izakaya Kikufuji</td>\n",
       "      <td>162</td>\n",
       "      <td>Makati City</td>\n",
       "      <td>Little Tokyo, 2277 Chino Roces Avenue, Legaspi...</td>\n",
       "      <td>Little Tokyo, Legaspi Village, Makati City</td>\n",
       "      <td>Little Tokyo, Legaspi Village, Makati City, Ma...</td>\n",
       "      <td>121.014101</td>\n",
       "      <td>14.553708</td>\n",
       "      <td>Japanese</td>\n",
       "      <td>...</td>\n",
       "      <td>Botswana Pula(P)</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3</td>\n",
       "      <td>4.5</td>\n",
       "      <td>Dark Green</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6300002</td>\n",
       "      <td>Heat - Edsa Shangri-La</td>\n",
       "      <td>162</td>\n",
       "      <td>Mandaluyong City</td>\n",
       "      <td>Edsa Shangri-La, 1 Garden Way, Ortigas, Mandal...</td>\n",
       "      <td>Edsa Shangri-La, Ortigas, Mandaluyong City</td>\n",
       "      <td>Edsa Shangri-La, Ortigas, Mandaluyong City, Ma...</td>\n",
       "      <td>121.056831</td>\n",
       "      <td>14.581404</td>\n",
       "      <td>Seafood, Asian, Filipino, Indian</td>\n",
       "      <td>...</td>\n",
       "      <td>Botswana Pula(P)</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>4</td>\n",
       "      <td>4.4</td>\n",
       "      <td>Green</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6318506</td>\n",
       "      <td>Ooma</td>\n",
       "      <td>162</td>\n",
       "      <td>Mandaluyong City</td>\n",
       "      <td>Third Floor, Mega Fashion Hall, SM Megamall, O...</td>\n",
       "      <td>SM Megamall, Ortigas, Mandaluyong City</td>\n",
       "      <td>SM Megamall, Ortigas, Mandaluyong City, Mandal...</td>\n",
       "      <td>121.056475</td>\n",
       "      <td>14.585318</td>\n",
       "      <td>Japanese, Sushi</td>\n",
       "      <td>...</td>\n",
       "      <td>Botswana Pula(P)</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>4</td>\n",
       "      <td>4.9</td>\n",
       "      <td>Dark Green</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6314302</td>\n",
       "      <td>Sambo Kojin</td>\n",
       "      <td>162</td>\n",
       "      <td>Mandaluyong City</td>\n",
       "      <td>Third Floor, Mega Atrium, SM Megamall, Ortigas...</td>\n",
       "      <td>SM Megamall, Ortigas, Mandaluyong City</td>\n",
       "      <td>SM Megamall, Ortigas, Mandaluyong City, Mandal...</td>\n",
       "      <td>121.057508</td>\n",
       "      <td>14.584450</td>\n",
       "      <td>Japanese, Korean</td>\n",
       "      <td>...</td>\n",
       "      <td>Botswana Pula(P)</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>4</td>\n",
       "      <td>4.8</td>\n",
       "      <td>Dark Green</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>229</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Restaurant ID         Restaurant Name  Country Code              City  \\\n",
       "0        6317637        Le Petit Souffle           162       Makati City   \n",
       "1        6304287        Izakaya Kikufuji           162       Makati City   \n",
       "2        6300002  Heat - Edsa Shangri-La           162  Mandaluyong City   \n",
       "3        6318506                    Ooma           162  Mandaluyong City   \n",
       "4        6314302             Sambo Kojin           162  Mandaluyong City   \n",
       "\n",
       "                                             Address  \\\n",
       "0  Third Floor, Century City Mall, Kalayaan Avenu...   \n",
       "1  Little Tokyo, 2277 Chino Roces Avenue, Legaspi...   \n",
       "2  Edsa Shangri-La, 1 Garden Way, Ortigas, Mandal...   \n",
       "3  Third Floor, Mega Fashion Hall, SM Megamall, O...   \n",
       "4  Third Floor, Mega Atrium, SM Megamall, Ortigas...   \n",
       "\n",
       "                                     Locality  \\\n",
       "0   Century City Mall, Poblacion, Makati City   \n",
       "1  Little Tokyo, Legaspi Village, Makati City   \n",
       "2  Edsa Shangri-La, Ortigas, Mandaluyong City   \n",
       "3      SM Megamall, Ortigas, Mandaluyong City   \n",
       "4      SM Megamall, Ortigas, Mandaluyong City   \n",
       "\n",
       "                                    Locality Verbose   Longitude   Latitude  \\\n",
       "0  Century City Mall, Poblacion, Makati City, Mak...  121.027535  14.565443   \n",
       "1  Little Tokyo, Legaspi Village, Makati City, Ma...  121.014101  14.553708   \n",
       "2  Edsa Shangri-La, Ortigas, Mandaluyong City, Ma...  121.056831  14.581404   \n",
       "3  SM Megamall, Ortigas, Mandaluyong City, Mandal...  121.056475  14.585318   \n",
       "4  SM Megamall, Ortigas, Mandaluyong City, Mandal...  121.057508  14.584450   \n",
       "\n",
       "                           Cuisines  ...          Currency Has Table booking  \\\n",
       "0        French, Japanese, Desserts  ...  Botswana Pula(P)               Yes   \n",
       "1                          Japanese  ...  Botswana Pula(P)               Yes   \n",
       "2  Seafood, Asian, Filipino, Indian  ...  Botswana Pula(P)               Yes   \n",
       "3                   Japanese, Sushi  ...  Botswana Pula(P)                No   \n",
       "4                  Japanese, Korean  ...  Botswana Pula(P)               Yes   \n",
       "\n",
       "  Has Online delivery Is delivering now Switch to order menu Price range  \\\n",
       "0                  No                No                   No           3   \n",
       "1                  No                No                   No           3   \n",
       "2                  No                No                   No           4   \n",
       "3                  No                No                   No           4   \n",
       "4                  No                No                   No           4   \n",
       "\n",
       "   Aggregate rating  Rating color Rating text Votes  \n",
       "0               4.8    Dark Green   Excellent   314  \n",
       "1               4.5    Dark Green   Excellent   591  \n",
       "2               4.4         Green   Very Good   270  \n",
       "3               4.9    Dark Green   Excellent   365  \n",
       "4               4.8    Dark Green   Excellent   229  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "df9a2f67",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9551, 21)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "07912dff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Restaurant ID', 'Restaurant Name', 'Country Code', 'City', 'Address',\n",
       "       'Locality', 'Locality Verbose', 'Longitude', 'Latitude', 'Cuisines',\n",
       "       'Average Cost for two', 'Currency', 'Has Table booking',\n",
       "       'Has Online delivery', 'Is delivering now', 'Switch to order menu',\n",
       "       'Price range', 'Aggregate rating', 'Rating color', 'Rating text',\n",
       "       'Votes'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b12608e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9551 entries, 0 to 9550\n",
      "Data columns (total 21 columns):\n",
      " #   Column                Non-Null Count  Dtype  \n",
      "---  ------                --------------  -----  \n",
      " 0   Restaurant ID         9551 non-null   int64  \n",
      " 1   Restaurant Name       9551 non-null   object \n",
      " 2   Country Code          9551 non-null   int64  \n",
      " 3   City                  9551 non-null   object \n",
      " 4   Address               9551 non-null   object \n",
      " 5   Locality              9551 non-null   object \n",
      " 6   Locality Verbose      9551 non-null   object \n",
      " 7   Longitude             9551 non-null   float64\n",
      " 8   Latitude              9551 non-null   float64\n",
      " 9   Cuisines              9542 non-null   object \n",
      " 10  Average Cost for two  9551 non-null   int64  \n",
      " 11  Currency              9551 non-null   object \n",
      " 12  Has Table booking     9551 non-null   object \n",
      " 13  Has Online delivery   9551 non-null   object \n",
      " 14  Is delivering now     9551 non-null   object \n",
      " 15  Switch to order menu  9551 non-null   object \n",
      " 16  Price range           9551 non-null   int64  \n",
      " 17  Aggregate rating      9551 non-null   float64\n",
      " 18  Rating color          9551 non-null   object \n",
      " 19  Rating text           9551 non-null   object \n",
      " 20  Votes                 9551 non-null   int64  \n",
      "dtypes: float64(3), int64(5), object(13)\n",
      "memory usage: 1.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4794c8d3",
   "metadata": {},
   "source": [
    "# In Data Analytics thing we all do\n",
    "1. Missing values\n",
    "2. Explore about Numerical value\n",
    "3. Explore about Categorical value\n",
    "4. Finding Relationship between features\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0f5dec88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Restaurant ID           0\n",
       "Restaurant Name         0\n",
       "Country Code            0\n",
       "City                    0\n",
       "Address                 0\n",
       "Locality                0\n",
       "Locality Verbose        0\n",
       "Longitude               0\n",
       "Latitude                0\n",
       "Cuisines                9\n",
       "Average Cost for two    0\n",
       "Currency                0\n",
       "Has Table booking       0\n",
       "Has Online delivery     0\n",
       "Is delivering now       0\n",
       "Switch to order menu    0\n",
       "Price range             0\n",
       "Aggregate rating        0\n",
       "Rating color            0\n",
       "Rating text             0\n",
       "Votes                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "52282d46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Cuisines']"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[feature for feature in df.columns if df[feature].isnull().sum()>0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "46f1244e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "eb7054a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_country= pd.read_excel(\"Country-code.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d8a04c07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Code</th>\n",
       "      <th>Country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>India</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14</td>\n",
       "      <td>Australia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30</td>\n",
       "      <td>Brazil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37</td>\n",
       "      <td>Canada</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>94</td>\n",
       "      <td>Indonesia</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Country Code    Country\n",
       "0             1      India\n",
       "1            14  Australia\n",
       "2            30     Brazil\n",
       "3            37     Canada\n",
       "4            94  Indonesia"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_country.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "99d0d512",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15, 2)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_country.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fa18f6d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Restaurant ID', 'Restaurant Name', 'Country Code', 'City', 'Address',\n",
       "       'Locality', 'Locality Verbose', 'Longitude', 'Latitude', 'Cuisines',\n",
       "       'Average Cost for two', 'Currency', 'Has Table booking',\n",
       "       'Has Online delivery', 'Is delivering now', 'Switch to order menu',\n",
       "       'Price range', 'Aggregate rating', 'Rating color', 'Rating text',\n",
       "       'Votes'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bf74340c",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_df= pd.merge(df,df_country,on ='Country Code',how ='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "58a6bb1e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Restaurant ID</th>\n",
       "      <th>Restaurant Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>City</th>\n",
       "      <th>Address</th>\n",
       "      <th>Locality</th>\n",
       "      <th>Locality Verbose</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Cuisines</th>\n",
       "      <th>...</th>\n",
       "      <th>Has Table booking</th>\n",
       "      <th>Has Online delivery</th>\n",
       "      <th>Is delivering now</th>\n",
       "      <th>Switch to order menu</th>\n",
       "      <th>Price range</th>\n",
       "      <th>Aggregate rating</th>\n",
       "      <th>Rating color</th>\n",
       "      <th>Rating text</th>\n",
       "      <th>Votes</th>\n",
       "      <th>Country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6317637</td>\n",
       "      <td>Le Petit Souffle</td>\n",
       "      <td>162</td>\n",
       "      <td>Makati City</td>\n",
       "      <td>Third Floor, Century City Mall, Kalayaan Avenu...</td>\n",
       "      <td>Century City Mall, Poblacion, Makati City</td>\n",
       "      <td>Century City Mall, Poblacion, Makati City, Mak...</td>\n",
       "      <td>121.027535</td>\n",
       "      <td>14.565443</td>\n",
       "      <td>French, Japanese, Desserts</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3</td>\n",
       "      <td>4.8</td>\n",
       "      <td>Dark Green</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>314</td>\n",
       "      <td>Phillipines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6304287</td>\n",
       "      <td>Izakaya Kikufuji</td>\n",
       "      <td>162</td>\n",
       "      <td>Makati City</td>\n",
       "      <td>Little Tokyo, 2277 Chino Roces Avenue, Legaspi...</td>\n",
       "      <td>Little Tokyo, Legaspi Village, Makati City</td>\n",
       "      <td>Little Tokyo, Legaspi Village, Makati City, Ma...</td>\n",
       "      <td>121.014101</td>\n",
       "      <td>14.553708</td>\n",
       "      <td>Japanese</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3</td>\n",
       "      <td>4.5</td>\n",
       "      <td>Dark Green</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>591</td>\n",
       "      <td>Phillipines</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Restaurant ID   Restaurant Name  Country Code         City  \\\n",
       "0        6317637  Le Petit Souffle           162  Makati City   \n",
       "1        6304287  Izakaya Kikufuji           162  Makati City   \n",
       "\n",
       "                                             Address  \\\n",
       "0  Third Floor, Century City Mall, Kalayaan Avenu...   \n",
       "1  Little Tokyo, 2277 Chino Roces Avenue, Legaspi...   \n",
       "\n",
       "                                     Locality  \\\n",
       "0   Century City Mall, Poblacion, Makati City   \n",
       "1  Little Tokyo, Legaspi Village, Makati City   \n",
       "\n",
       "                                    Locality Verbose   Longitude   Latitude  \\\n",
       "0  Century City Mall, Poblacion, Makati City, Mak...  121.027535  14.565443   \n",
       "1  Little Tokyo, Legaspi Village, Makati City, Ma...  121.014101  14.553708   \n",
       "\n",
       "                     Cuisines  ...  Has Table booking Has Online delivery  \\\n",
       "0  French, Japanese, Desserts  ...                Yes                  No   \n",
       "1                    Japanese  ...                Yes                  No   \n",
       "\n",
       "  Is delivering now Switch to order menu Price range Aggregate rating  \\\n",
       "0                No                   No           3              4.8   \n",
       "1                No                   No           3              4.5   \n",
       "\n",
       "   Rating color  Rating text Votes      Country  \n",
       "0    Dark Green    Excellent   314  Phillipines  \n",
       "1    Dark Green    Excellent   591  Phillipines  \n",
       "\n",
       "[2 rows x 22 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6fe82ec1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9551, 22)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5d489d93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Restaurant ID             int64\n",
       "Restaurant Name          object\n",
       "Country Code              int64\n",
       "City                     object\n",
       "Address                  object\n",
       "Locality                 object\n",
       "Locality Verbose         object\n",
       "Longitude               float64\n",
       "Latitude                float64\n",
       "Cuisines                 object\n",
       "Average Cost for two      int64\n",
       "Currency                 object\n",
       "Has Table booking        object\n",
       "Has Online delivery      object\n",
       "Is delivering now        object\n",
       "Switch to order menu     object\n",
       "Price range               int64\n",
       "Aggregate rating        float64\n",
       "Rating color             object\n",
       "Rating text              object\n",
       "Votes                     int64\n",
       "Country                  object\n",
       "dtype: object"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4c4a881d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "India             8652\n",
       "United States      434\n",
       "United Kingdom      80\n",
       "Brazil              60\n",
       "UAE                 60\n",
       "South Africa        60\n",
       "New Zealand         40\n",
       "Turkey              34\n",
       "Australia           24\n",
       "Phillipines         22\n",
       "Indonesia           21\n",
       "Singapore           20\n",
       "Qatar               20\n",
       "Sri Lanka           20\n",
       "Canada               4\n",
       "Name: Country, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.Country.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8702c914",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Restaurant ID', 'Restaurant Name', 'Country Code', 'City', 'Address',\n",
       "       'Locality', 'Locality Verbose', 'Longitude', 'Latitude', 'Cuisines',\n",
       "       'Average Cost for two', 'Currency', 'Has Table booking',\n",
       "       'Has Online delivery', 'Is delivering now', 'Switch to order menu',\n",
       "       'Price range', 'Aggregate rating', 'Rating color', 'Rating text',\n",
       "       'Votes', 'Country'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fcc061c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "ratings = final_df.groupby(['Aggregate rating','Rating color','Rating text']).size().reset_index().rename(columns= {0:'Rating count'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b2eac1c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Aggregate rating</th>\n",
       "      <th>Rating color</th>\n",
       "      <th>Rating text</th>\n",
       "      <th>Rating count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>White</td>\n",
       "      <td>Not rated</td>\n",
       "      <td>2148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.8</td>\n",
       "      <td>Red</td>\n",
       "      <td>Poor</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.9</td>\n",
       "      <td>Red</td>\n",
       "      <td>Poor</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>Red</td>\n",
       "      <td>Poor</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.1</td>\n",
       "      <td>Red</td>\n",
       "      <td>Poor</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2.2</td>\n",
       "      <td>Red</td>\n",
       "      <td>Poor</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2.3</td>\n",
       "      <td>Red</td>\n",
       "      <td>Poor</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2.4</td>\n",
       "      <td>Red</td>\n",
       "      <td>Poor</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2.5</td>\n",
       "      <td>Orange</td>\n",
       "      <td>Average</td>\n",
       "      <td>110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2.6</td>\n",
       "      <td>Orange</td>\n",
       "      <td>Average</td>\n",
       "      <td>191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2.7</td>\n",
       "      <td>Orange</td>\n",
       "      <td>Average</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2.8</td>\n",
       "      <td>Orange</td>\n",
       "      <td>Average</td>\n",
       "      <td>315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2.9</td>\n",
       "      <td>Orange</td>\n",
       "      <td>Average</td>\n",
       "      <td>381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3.0</td>\n",
       "      <td>Orange</td>\n",
       "      <td>Average</td>\n",
       "      <td>468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>3.1</td>\n",
       "      <td>Orange</td>\n",
       "      <td>Average</td>\n",
       "      <td>519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>3.2</td>\n",
       "      <td>Orange</td>\n",
       "      <td>Average</td>\n",
       "      <td>522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>3.3</td>\n",
       "      <td>Orange</td>\n",
       "      <td>Average</td>\n",
       "      <td>483</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>3.4</td>\n",
       "      <td>Orange</td>\n",
       "      <td>Average</td>\n",
       "      <td>498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>3.5</td>\n",
       "      <td>Yellow</td>\n",
       "      <td>Good</td>\n",
       "      <td>480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>3.6</td>\n",
       "      <td>Yellow</td>\n",
       "      <td>Good</td>\n",
       "      <td>458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>3.7</td>\n",
       "      <td>Yellow</td>\n",
       "      <td>Good</td>\n",
       "      <td>427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>3.8</td>\n",
       "      <td>Yellow</td>\n",
       "      <td>Good</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>3.9</td>\n",
       "      <td>Yellow</td>\n",
       "      <td>Good</td>\n",
       "      <td>335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>4.0</td>\n",
       "      <td>Green</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>4.1</td>\n",
       "      <td>Green</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>4.2</td>\n",
       "      <td>Green</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>4.3</td>\n",
       "      <td>Green</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>4.4</td>\n",
       "      <td>Green</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>4.5</td>\n",
       "      <td>Dark Green</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>4.6</td>\n",
       "      <td>Dark Green</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>4.7</td>\n",
       "      <td>Dark Green</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>4.8</td>\n",
       "      <td>Dark Green</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>4.9</td>\n",
       "      <td>Dark Green</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Aggregate rating Rating color Rating text  Rating count\n",
       "0                0.0        White   Not rated          2148\n",
       "1                1.8          Red        Poor             1\n",
       "2                1.9          Red        Poor             2\n",
       "3                2.0          Red        Poor             7\n",
       "4                2.1          Red        Poor            15\n",
       "5                2.2          Red        Poor            27\n",
       "6                2.3          Red        Poor            47\n",
       "7                2.4          Red        Poor            87\n",
       "8                2.5       Orange     Average           110\n",
       "9                2.6       Orange     Average           191\n",
       "10               2.7       Orange     Average           250\n",
       "11               2.8       Orange     Average           315\n",
       "12               2.9       Orange     Average           381\n",
       "13               3.0       Orange     Average           468\n",
       "14               3.1       Orange     Average           519\n",
       "15               3.2       Orange     Average           522\n",
       "16               3.3       Orange     Average           483\n",
       "17               3.4       Orange     Average           498\n",
       "18               3.5       Yellow        Good           480\n",
       "19               3.6       Yellow        Good           458\n",
       "20               3.7       Yellow        Good           427\n",
       "21               3.8       Yellow        Good           400\n",
       "22               3.9       Yellow        Good           335\n",
       "23               4.0        Green   Very Good           266\n",
       "24               4.1        Green   Very Good           274\n",
       "25               4.2        Green   Very Good           221\n",
       "26               4.3        Green   Very Good           174\n",
       "27               4.4        Green   Very Good           144\n",
       "28               4.5   Dark Green   Excellent            95\n",
       "29               4.6   Dark Green   Excellent            78\n",
       "30               4.7   Dark Green   Excellent            42\n",
       "31               4.8   Dark Green   Excellent            25\n",
       "32               4.9   Dark Green   Excellent            61"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "891ced7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Aggregate rating</th>\n",
       "      <th>Rating color</th>\n",
       "      <th>Rating text</th>\n",
       "      <th>Rating count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>White</td>\n",
       "      <td>Not rated</td>\n",
       "      <td>2148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.8</td>\n",
       "      <td>Red</td>\n",
       "      <td>Poor</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.9</td>\n",
       "      <td>Red</td>\n",
       "      <td>Poor</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>Red</td>\n",
       "      <td>Poor</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.1</td>\n",
       "      <td>Red</td>\n",
       "      <td>Poor</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Aggregate rating Rating color Rating text  Rating count\n",
       "0               0.0        White   Not rated          2148\n",
       "1               1.8          Red        Poor             1\n",
       "2               1.9          Red        Poor             2\n",
       "3               2.0          Red        Poor             7\n",
       "4               2.1          Red        Poor            15"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f00c73e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Aggregate rating', ylabel='Rating count'>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['figure.figsize'] = (12,6)\n",
    "sns.barplot(x = \"Aggregate rating\", y = \"Rating count\", data=ratings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c5bb3c6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Aggregate rating', ylabel='Rating count'>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['figure.figsize'] = (12,6)\n",
    "sns.barplot(x = \"Aggregate rating\", y = \"Rating count\", hue = 'Rating color', data=ratings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "feb8b681",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Aggregate rating', ylabel='Rating count'>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['figure.figsize'] = (12,6)\n",
    "sns.barplot(x = \"Aggregate rating\", y = \"Rating count\", hue = 'Rating color', data=ratings,palette = ['white','red','orange','yellow','green','darkgreen'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "af3e9662",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Rating color', ylabel='count'>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x=\"Rating color\",data=ratings,color= 'hue',palette = ['white','red','orange','yellow','green','darkgreen'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ee7b88ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Restaurant ID</th>\n",
       "      <th>Restaurant Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>City</th>\n",
       "      <th>Address</th>\n",
       "      <th>Locality</th>\n",
       "      <th>Locality Verbose</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Cuisines</th>\n",
       "      <th>...</th>\n",
       "      <th>Has Table booking</th>\n",
       "      <th>Has Online delivery</th>\n",
       "      <th>Is delivering now</th>\n",
       "      <th>Switch to order menu</th>\n",
       "      <th>Price range</th>\n",
       "      <th>Aggregate rating</th>\n",
       "      <th>Rating color</th>\n",
       "      <th>Rating text</th>\n",
       "      <th>Votes</th>\n",
       "      <th>Country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>6600060</td>\n",
       "      <td>Sandubas CafÃ­Â©</td>\n",
       "      <td>30</td>\n",
       "      <td>BrasÃ­_lia</td>\n",
       "      <td>EdifÃ­_cio JosÃ­Â© Severo, SCS 6, Bloco A, Loja 9...</td>\n",
       "      <td>Asa Sul</td>\n",
       "      <td>Asa Sul, BrasÃ­_lia</td>\n",
       "      <td>-47.890167</td>\n",
       "      <td>-15.797000</td>\n",
       "      <td>Brazilian, Cafe</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>White</td>\n",
       "      <td>Not rated</td>\n",
       "      <td>2</td>\n",
       "      <td>Brazil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>7305048</td>\n",
       "      <td>Quiosque Chopp Brahma</td>\n",
       "      <td>30</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Madureira Shopping - Loja 289/290, Piso 2, Est...</td>\n",
       "      <td>Madureira</td>\n",
       "      <td>Madureira, Rio de Janeiro</td>\n",
       "      <td>-43.341164</td>\n",
       "      <td>-22.870413</td>\n",
       "      <td>Bar Food, Brazilian</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>White</td>\n",
       "      <td>Not rated</td>\n",
       "      <td>1</td>\n",
       "      <td>Brazil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>6710645</td>\n",
       "      <td>Cantinho da Gula</td>\n",
       "      <td>30</td>\n",
       "      <td>SÃ­Â£o Paulo</td>\n",
       "      <td>Rua Pedroso Alvarenga, 522, Itaim Bibi, SÃ­Â£o P...</td>\n",
       "      <td>Itaim Bibi</td>\n",
       "      <td>Itaim Bibi, SÃ­Â£o Paulo</td>\n",
       "      <td>-46.675667</td>\n",
       "      <td>-23.581000</td>\n",
       "      <td>Brazilian</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>White</td>\n",
       "      <td>Not rated</td>\n",
       "      <td>0</td>\n",
       "      <td>Brazil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>6701419</td>\n",
       "      <td>Divino FogÃ­Â£o</td>\n",
       "      <td>30</td>\n",
       "      <td>SÃ­Â£o Paulo</td>\n",
       "      <td>Shopping MetrÃ­Ã‡ Santa Cruz - Piso L2, Rua Domi...</td>\n",
       "      <td>Shopping MetrÃ­Ã‡ Santa Cruz, Vila Mariana</td>\n",
       "      <td>Shopping MetrÃ­Ã‡ Santa Cruz, Vila Mariana, SÃ­Â£o...</td>\n",
       "      <td>-46.637167</td>\n",
       "      <td>-23.599500</td>\n",
       "      <td>Brazilian, Mineira</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>White</td>\n",
       "      <td>Not rated</td>\n",
       "      <td>2</td>\n",
       "      <td>Brazil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>6703956</td>\n",
       "      <td>Super Grill</td>\n",
       "      <td>30</td>\n",
       "      <td>SÃ­Â£o Paulo</td>\n",
       "      <td>Shopping Morumbi - Piso Lazer, Avenida Roque P...</td>\n",
       "      <td>Shopping Morumbi, Santo Amaro</td>\n",
       "      <td>Shopping Morumbi, Santo Amaro, SÃ­Â£o Paulo</td>\n",
       "      <td>-46.698574</td>\n",
       "      <td>-23.622925</td>\n",
       "      <td>Brazilian</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>White</td>\n",
       "      <td>Not rated</td>\n",
       "      <td>2</td>\n",
       "      <td>Brazil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9109</th>\n",
       "      <td>18277023</td>\n",
       "      <td>Bread &amp; Pasta</td>\n",
       "      <td>1</td>\n",
       "      <td>Noida</td>\n",
       "      <td>Shop 15, Near HDFC Bank, Tulip Mall, Sector 48...</td>\n",
       "      <td>Tulip Mall, Sector 48, Noida</td>\n",
       "      <td>Tulip Mall, Sector 48, Noida, Noida</td>\n",
       "      <td>77.367303</td>\n",
       "      <td>28.557929</td>\n",
       "      <td>Fast Food</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>White</td>\n",
       "      <td>Not rated</td>\n",
       "      <td>1</td>\n",
       "      <td>India</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9110</th>\n",
       "      <td>18313203</td>\n",
       "      <td>Chillies Cafe</td>\n",
       "      <td>1</td>\n",
       "      <td>Noida</td>\n",
       "      <td>G-11, Tulip Mall, Sector 48, Noida</td>\n",
       "      <td>Tulip Mall, Sector 48, Noida</td>\n",
       "      <td>Tulip Mall, Sector 48, Noida, Noida</td>\n",
       "      <td>77.367188</td>\n",
       "      <td>28.557842</td>\n",
       "      <td>Fast Food</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>White</td>\n",
       "      <td>Not rated</td>\n",
       "      <td>3</td>\n",
       "      <td>India</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9111</th>\n",
       "      <td>18254559</td>\n",
       "      <td>Platters</td>\n",
       "      <td>1</td>\n",
       "      <td>Noida</td>\n",
       "      <td>Shop 1, Tulip Mall, Near HDFC Bank, Sector 48,...</td>\n",
       "      <td>Tulip Mall, Sector 48, Noida</td>\n",
       "      <td>Tulip Mall, Sector 48, Noida, Noida</td>\n",
       "      <td>77.367322</td>\n",
       "      <td>28.557930</td>\n",
       "      <td>North Indian, Chinese</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>White</td>\n",
       "      <td>Not rated</td>\n",
       "      <td>0</td>\n",
       "      <td>India</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9112</th>\n",
       "      <td>18255132</td>\n",
       "      <td>The Grand</td>\n",
       "      <td>1</td>\n",
       "      <td>Noida</td>\n",
       "      <td>G-5, Tulip Mall, Sector 48, Noida</td>\n",
       "      <td>Tulip Mall, Sector 48, Noida</td>\n",
       "      <td>Tulip Mall, Sector 48, Noida, Noida</td>\n",
       "      <td>77.367188</td>\n",
       "      <td>28.557852</td>\n",
       "      <td>Raw Meats, Fast Food</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>White</td>\n",
       "      <td>Not rated</td>\n",
       "      <td>1</td>\n",
       "      <td>India</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9351</th>\n",
       "      <td>18273002</td>\n",
       "      <td>Damascena Coffee House</td>\n",
       "      <td>215</td>\n",
       "      <td>Birmingham</td>\n",
       "      <td>133 Alcester Road, Moseley, Birmingham</td>\n",
       "      <td>Moseley</td>\n",
       "      <td>Moseley, Birmingham</td>\n",
       "      <td>-1.888555</td>\n",
       "      <td>52.446302</td>\n",
       "      <td>Greek, Mediterranean, Middle Eastern</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>White</td>\n",
       "      <td>Not rated</td>\n",
       "      <td>3</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2148 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Restaurant ID         Restaurant Name  Country Code            City  \\\n",
       "30          6600060          Sandubas CafÃ­Â©            30       BrasÃ­_lia   \n",
       "58          7305048   Quiosque Chopp Brahma            30  Rio de Janeiro   \n",
       "69          6710645        Cantinho da Gula            30      SÃ­Â£o Paulo   \n",
       "77          6701419           Divino FogÃ­Â£o            30      SÃ­Â£o Paulo   \n",
       "78          6703956             Super Grill            30      SÃ­Â£o Paulo   \n",
       "...             ...                     ...           ...             ...   \n",
       "9109       18277023           Bread & Pasta             1           Noida   \n",
       "9110       18313203           Chillies Cafe             1           Noida   \n",
       "9111       18254559                Platters             1           Noida   \n",
       "9112       18255132               The Grand             1           Noida   \n",
       "9351       18273002  Damascena Coffee House           215      Birmingham   \n",
       "\n",
       "                                                Address  \\\n",
       "30    EdifÃ­_cio JosÃ­Â© Severo, SCS 6, Bloco A, Loja 9...   \n",
       "58    Madureira Shopping - Loja 289/290, Piso 2, Est...   \n",
       "69    Rua Pedroso Alvarenga, 522, Itaim Bibi, SÃ­Â£o P...   \n",
       "77    Shopping MetrÃ­Ã‡ Santa Cruz - Piso L2, Rua Domi...   \n",
       "78    Shopping Morumbi - Piso Lazer, Avenida Roque P...   \n",
       "...                                                 ...   \n",
       "9109  Shop 15, Near HDFC Bank, Tulip Mall, Sector 48...   \n",
       "9110                 G-11, Tulip Mall, Sector 48, Noida   \n",
       "9111  Shop 1, Tulip Mall, Near HDFC Bank, Sector 48,...   \n",
       "9112                  G-5, Tulip Mall, Sector 48, Noida   \n",
       "9351             133 Alcester Road, Moseley, Birmingham   \n",
       "\n",
       "                                      Locality  \\\n",
       "30                                     Asa Sul   \n",
       "58                                   Madureira   \n",
       "69                                  Itaim Bibi   \n",
       "77    Shopping MetrÃ­Ã‡ Santa Cruz, Vila Mariana   \n",
       "78               Shopping Morumbi, Santo Amaro   \n",
       "...                                        ...   \n",
       "9109              Tulip Mall, Sector 48, Noida   \n",
       "9110              Tulip Mall, Sector 48, Noida   \n",
       "9111              Tulip Mall, Sector 48, Noida   \n",
       "9112              Tulip Mall, Sector 48, Noida   \n",
       "9351                                   Moseley   \n",
       "\n",
       "                                       Locality Verbose  Longitude   Latitude  \\\n",
       "30                                   Asa Sul, BrasÃ­_lia -47.890167 -15.797000   \n",
       "58                            Madureira, Rio de Janeiro -43.341164 -22.870413   \n",
       "69                               Itaim Bibi, SÃ­Â£o Paulo -46.675667 -23.581000   \n",
       "77    Shopping MetrÃ­Ã‡ Santa Cruz, Vila Mariana, SÃ­Â£o... -46.637167 -23.599500   \n",
       "78            Shopping Morumbi, Santo Amaro, SÃ­Â£o Paulo -46.698574 -23.622925   \n",
       "...                                                 ...        ...        ...   \n",
       "9109                Tulip Mall, Sector 48, Noida, Noida  77.367303  28.557929   \n",
       "9110                Tulip Mall, Sector 48, Noida, Noida  77.367188  28.557842   \n",
       "9111                Tulip Mall, Sector 48, Noida, Noida  77.367322  28.557930   \n",
       "9112                Tulip Mall, Sector 48, Noida, Noida  77.367188  28.557852   \n",
       "9351                                Moseley, Birmingham  -1.888555  52.446302   \n",
       "\n",
       "                                  Cuisines  ...  Has Table booking  \\\n",
       "30                         Brazilian, Cafe  ...                 No   \n",
       "58                     Bar Food, Brazilian  ...                 No   \n",
       "69                               Brazilian  ...                 No   \n",
       "77                      Brazilian, Mineira  ...                 No   \n",
       "78                               Brazilian  ...                 No   \n",
       "...                                    ...  ...                ...   \n",
       "9109                             Fast Food  ...                 No   \n",
       "9110                             Fast Food  ...                 No   \n",
       "9111                 North Indian, Chinese  ...                 No   \n",
       "9112                  Raw Meats, Fast Food  ...                 No   \n",
       "9351  Greek, Mediterranean, Middle Eastern  ...                 No   \n",
       "\n",
       "     Has Online delivery Is delivering now Switch to order menu Price range  \\\n",
       "30                    No                No                   No           1   \n",
       "58                    No                No                   No           3   \n",
       "69                    No                No                   No           2   \n",
       "77                    No                No                   No           3   \n",
       "78                    No                No                   No           2   \n",
       "...                  ...               ...                  ...         ...   \n",
       "9109                  No                No                   No           1   \n",
       "9110                  No                No                   No           2   \n",
       "9111                  No                No                   No           2   \n",
       "9112                  No                No                   No           1   \n",
       "9351                  No                No                   No           2   \n",
       "\n",
       "     Aggregate rating  Rating color  Rating text Votes         Country  \n",
       "30                0.0         White    Not rated     2          Brazil  \n",
       "58                0.0         White    Not rated     1          Brazil  \n",
       "69                0.0         White    Not rated     0          Brazil  \n",
       "77                0.0         White    Not rated     2          Brazil  \n",
       "78                0.0         White    Not rated     2          Brazil  \n",
       "...               ...           ...          ...   ...             ...  \n",
       "9109              0.0         White    Not rated     1           India  \n",
       "9110              0.0         White    Not rated     3           India  \n",
       "9111              0.0         White    Not rated     0           India  \n",
       "9112              0.0         White    Not rated     1           India  \n",
       "9351              0.0         White    Not rated     3  United Kingdom  \n",
       "\n",
       "[2148 rows x 22 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df[final_df['Rating color'] == 'White']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "864ea3ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>India</td>\n",
       "      <td>2139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>United States</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Country     0\n",
       "0          Brazil     5\n",
       "1           India  2139\n",
       "2  United Kingdom     1\n",
       "3   United States     3"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df[final_df['Rating color']== 'White'].groupby('Country').size().reset_index().head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "a3227008",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Aggregate rating</th>\n",
       "      <th>Country</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>India</td>\n",
       "      <td>2139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>United States</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.8</td>\n",
       "      <td>India</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Aggregate rating         Country     0\n",
       "0               0.0          Brazil     5\n",
       "1               0.0           India  2139\n",
       "2               0.0  United Kingdom     1\n",
       "3               0.0   United States     3\n",
       "4               1.8           India     1"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.groupby(['Aggregate rating','Country']).size().reset_index().head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "3b035aaa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Restaurant ID', 'Restaurant Name', 'Country Code', 'City', 'Address',\n",
       "       'Locality', 'Locality Verbose', 'Longitude', 'Latitude', 'Cuisines',\n",
       "       'Average Cost for two', 'Currency', 'Has Table booking',\n",
       "       'Has Online delivery', 'Is delivering now', 'Switch to order menu',\n",
       "       'Price range', 'Aggregate rating', 'Rating color', 'Rating text',\n",
       "       'Votes', 'Country'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#find out which currency is used by which country.\n",
    "\n",
    "final_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "884106a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Currency</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Australia</td>\n",
       "      <td>Dollar($)</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>Brazilian Real(R$)</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Canada</td>\n",
       "      <td>Dollar($)</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>India</td>\n",
       "      <td>Indian Rupees(Rs.)</td>\n",
       "      <td>8652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Indonesian Rupiah(IDR)</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>New Zealand</td>\n",
       "      <td>NewZealand($)</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Phillipines</td>\n",
       "      <td>Botswana Pula(P)</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Qatar</td>\n",
       "      <td>Qatari Rial(QR)</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Singapore</td>\n",
       "      <td>Dollar($)</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>Rand(R)</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Sri Lanka</td>\n",
       "      <td>Sri Lankan Rupee(LKR)</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Turkey</td>\n",
       "      <td>Turkish Lira(TL)</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>UAE</td>\n",
       "      <td>Emirati Diram(AED)</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>Pounds(ÂŒÂ£)</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>United States</td>\n",
       "      <td>Dollar($)</td>\n",
       "      <td>434</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Country                Currency     0\n",
       "0        Australia               Dollar($)    24\n",
       "1           Brazil      Brazilian Real(R$)    60\n",
       "2           Canada               Dollar($)     4\n",
       "3            India      Indian Rupees(Rs.)  8652\n",
       "4        Indonesia  Indonesian Rupiah(IDR)    21\n",
       "5      New Zealand           NewZealand($)    40\n",
       "6      Phillipines        Botswana Pula(P)    22\n",
       "7            Qatar         Qatari Rial(QR)    20\n",
       "8        Singapore               Dollar($)    20\n",
       "9     South Africa                 Rand(R)    60\n",
       "10       Sri Lanka   Sri Lankan Rupee(LKR)    20\n",
       "11          Turkey        Turkish Lira(TL)    34\n",
       "12             UAE      Emirati Diram(AED)    60\n",
       "13  United Kingdom              Pounds(ÂŒÂ£)    80\n",
       "14   United States               Dollar($)   434"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.groupby(['Country','Currency']).size().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "f2a8ce6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Restaurant ID', 'Restaurant Name', 'Country Code', 'City', 'Address',\n",
       "       'Locality', 'Locality Verbose', 'Longitude', 'Latitude', 'Cuisines',\n",
       "       'Average Cost for two', 'Currency', 'Has Table booking',\n",
       "       'Has Online delivery', 'Is delivering now', 'Switch to order menu',\n",
       "       'Price range', 'Aggregate rating', 'Rating color', 'Rating text',\n",
       "       'Votes', 'Country'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#which countries do have online delivery options\n",
    "final_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "7bfad995",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Has Online delivery</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Australia</td>\n",
       "      <td>No</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>No</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Canada</td>\n",
       "      <td>No</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>India</td>\n",
       "      <td>No</td>\n",
       "      <td>6229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>India</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Indonesia</td>\n",
       "      <td>No</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>New Zealand</td>\n",
       "      <td>No</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Phillipines</td>\n",
       "      <td>No</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Qatar</td>\n",
       "      <td>No</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Singapore</td>\n",
       "      <td>No</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>No</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Sri Lanka</td>\n",
       "      <td>No</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Turkey</td>\n",
       "      <td>No</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>UAE</td>\n",
       "      <td>No</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>UAE</td>\n",
       "      <td>Yes</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>No</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>United States</td>\n",
       "      <td>No</td>\n",
       "      <td>434</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Country Has Online delivery     0\n",
       "0        Australia                  No    24\n",
       "1           Brazil                  No    60\n",
       "2           Canada                  No     4\n",
       "3            India                  No  6229\n",
       "4            India                 Yes  2423\n",
       "5        Indonesia                  No    21\n",
       "6      New Zealand                  No    40\n",
       "7      Phillipines                  No    22\n",
       "8            Qatar                  No    20\n",
       "9        Singapore                  No    20\n",
       "10    South Africa                  No    60\n",
       "11       Sri Lanka                  No    20\n",
       "12          Turkey                  No    34\n",
       "13             UAE                  No    32\n",
       "14             UAE                 Yes    28\n",
       "15  United Kingdom                  No    80\n",
       "16   United States                  No   434"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.groupby(['Country','Has Online delivery']).size().reset_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0b2c15e",
   "metadata": {},
   "source": [
    "# Observations\n",
    "Online delivery are available in India and UAE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "9fb027f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#create a pie chart for cities distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "46c7c893",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['New Delhi', 'Gurgaon', 'Noida', 'Faridabad', 'Ghaziabad',\n",
       "       'Bhubaneshwar', 'Amritsar', 'Ahmedabad', 'Lucknow', 'Guwahati',\n",
       "       ...\n",
       "       'Ojo Caliente', 'Montville', 'Monroe', 'Miller', 'Middleton Beach',\n",
       "       'Panchkula', 'Mc Millan', 'Mayfield', 'Macedon', 'Vineland Station'],\n",
       "      dtype='object', length=141)"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.City.value_counts().index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "6ea32c7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "city_values = final_df.City.value_counts().values\n",
    "city_labels = final_df.City.value_counts().index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "60d3e4c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.patches.Wedge at 0x1f2086b7c40>,\n",
       "  <matplotlib.patches.Wedge at 0x1f208737310>,\n",
       "  <matplotlib.patches.Wedge at 0x1f208737a30>,\n",
       "  <matplotlib.patches.Wedge at 0x1f208741190>,\n",
       "  <matplotlib.patches.Wedge at 0x1f2087418b0>],\n",
       " [Text(-0.6145352824185932, 0.9123301960708633, 'New Delhi'),\n",
       "  Text(0.0623675251198054, -1.0982305276263407, 'Gurgaon'),\n",
       "  Text(0.8789045225625368, -0.6614581167535246, 'Noida'),\n",
       "  Text(1.0922218418223437, -0.13058119407559224, 'Faridabad'),\n",
       "  Text(1.099946280005612, -0.010871113182029924, 'Ghaziabad')],\n",
       " [Text(-0.3352010631374145, 0.497634652402289, '68.87%'),\n",
       "  Text(0.0340186500653484, -0.5990348332507311, '14.07%'),\n",
       "  Text(0.47940246685229276, -0.36079533641101336, '13.59%'),\n",
       "  Text(0.5957573682667329, -0.07122610585941394, '3.16%'),\n",
       "  Text(0.5999706981848791, -0.005929698099289049, '0.31%')])"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pie(city_values[:5],labels = city_labels[:5],autopct = '%1.2f%%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "343d6f10",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
